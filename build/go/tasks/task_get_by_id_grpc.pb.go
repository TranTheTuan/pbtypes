// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/task-service/task_get_by_id.proto

package tasks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskGetByIDServiceClient is the client API for TaskGetByIDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskGetByIDServiceClient interface {
	GetTaskByID(ctx context.Context, in *GetTaskByIDRequest, opts ...grpc.CallOption) (*GetTaskByIDResponse, error)
}

type taskGetByIDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskGetByIDServiceClient(cc grpc.ClientConnInterface) TaskGetByIDServiceClient {
	return &taskGetByIDServiceClient{cc}
}

func (c *taskGetByIDServiceClient) GetTaskByID(ctx context.Context, in *GetTaskByIDRequest, opts ...grpc.CallOption) (*GetTaskByIDResponse, error) {
	out := new(GetTaskByIDResponse)
	err := c.cc.Invoke(ctx, "/task.v1.TaskGetByIDService/GetTaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskGetByIDServiceServer is the server API for TaskGetByIDService service.
// All implementations must embed UnimplementedTaskGetByIDServiceServer
// for forward compatibility
type TaskGetByIDServiceServer interface {
	GetTaskByID(context.Context, *GetTaskByIDRequest) (*GetTaskByIDResponse, error)
	mustEmbedUnimplementedTaskGetByIDServiceServer()
}

// UnimplementedTaskGetByIDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskGetByIDServiceServer struct {
}

func (UnimplementedTaskGetByIDServiceServer) GetTaskByID(context.Context, *GetTaskByIDRequest) (*GetTaskByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskByID not implemented")
}
func (UnimplementedTaskGetByIDServiceServer) mustEmbedUnimplementedTaskGetByIDServiceServer() {}

// UnsafeTaskGetByIDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskGetByIDServiceServer will
// result in compilation errors.
type UnsafeTaskGetByIDServiceServer interface {
	mustEmbedUnimplementedTaskGetByIDServiceServer()
}

func RegisterTaskGetByIDServiceServer(s grpc.ServiceRegistrar, srv TaskGetByIDServiceServer) {
	s.RegisterService(&TaskGetByIDService_ServiceDesc, srv)
}

func _TaskGetByIDService_GetTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskGetByIDServiceServer).GetTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.TaskGetByIDService/GetTaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskGetByIDServiceServer).GetTaskByID(ctx, req.(*GetTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskGetByIDService_ServiceDesc is the grpc.ServiceDesc for TaskGetByIDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskGetByIDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.v1.TaskGetByIDService",
	HandlerType: (*TaskGetByIDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskByID",
			Handler:    _TaskGetByIDService_GetTaskByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/task-service/task_get_by_id.proto",
}
